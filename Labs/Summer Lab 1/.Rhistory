library(kableExtra)   #HTML Table Styling
kable(flight.summary2, eval = T)
kable(flight.summary2, eval = T)
# This is a good place to put libraries required for using the ggplot function
knitr::opts_chunk$set(echo = TRUE)
options(scipen=999)
library(tidyverse) #Loads the dplyr package for data manipulation
library(nycflights13) #Loads the nycflights13 package for flights data
library(knitr)        #kable() for HTML Tables
library(kableExtra)   #HTML Table Styling
kable(flight.summary2, eval = T)
# This is a good place to put libraries required for using the ggplot function
knitr::opts_chunk$set(echo = TRUE)
options(scipen=999)
library(tidyverse) #Loads the dplyr package for data manipulation
library(nycflights13) #Loads the nycflights13 package for flights data
library(knitr)        #kable() for HTML Tables
library(kableExtra)   #HTML Table Styling
kable(flight.summary2, eval = T)
# This is a good place to put libraries required for using the ggplot function
knitr::opts_chunk$set(echo = TRUE)
options(scipen=999)
library(tidyverse) #Loads the dplyr package for data manipulation
library(nycflights13) #Loads the nycflights13 package for flights data
library(knitr)        #kable() for HTML Tables
library(kableExtra)   #HTML Table Styling
kable(flight.summary2, eval = T)
# This is a good place to put libraries required for using the ggplot function
knitr::opts_chunk$set(echo = TRUE)
options(scipen=999)
library(tidyverse) #Loads the dplyr package for data manipulation
library(nycflights13) #Loads the nycflights13 package for flights data
library(knitr)        #kable() for HTML Tables
library(kableExtra)   #HTML Table Styling
f1a<-filter(flights, flight == 807)
f1a
f1b<-select(f1a, flight, carrier, origin, dest)
f1b
f1c=rename(f1b,destination = dest)
f1c
f1d<- f1c %>%
select(carrier, origin, destination) %>%
arrange(carrier, origin, destination)
head(f1d, 5)
f1e<-arrange(f1d, desc(carrier), desc(origin), desc(destination))
head(f1e,18)
f2b=mutate(f2a,
dep_delay_hr = dep_hr - sched_dep_hr,
arr_delay_hr= arr_hr - sched_arr_hr)
# This is a good place to put libraries required for using the ggplot function
knitr::opts_chunk$set(echo = TRUE)
options(scipen=999)
library(tidyverse) #Loads the dplyr package for data manipulation
library(nycflights13) #Loads the nycflights13 package for flights data
library(knitr)        #kable() for HTML Tables
library(kableExtra)   #HTML Table Styling
f1a<-filter(flights, flight == 807)
f1a
f1b<-select(f1a, flight, carrier, origin, dest)
f1b
f1c=rename(f1b,destination = dest)
f1c
f1d<- f1c %>%
select(carrier, origin, destination) %>%
arrange(carrier, origin, destination)
head(f1d, 5)
f1e<-arrange(f1d, desc(carrier), desc(origin), desc(destination))
head(f1e,18)
f2a=transmute(flights,
dep_hr=dep_time%/%100+(dep_time%%100)/60,
sched_dep_hr=sched_dep_time%/%100+(sched_dep_time%%100)/60,
arr_hr=arr_time%/%100+(arr_time%%100)/60,
sched_arr_hr=sched_arr_time%/%100+(sched_arr_time%%100)/60)
names(f2a)
head(f2a,5)
f2b=mutate(f2a,
dep_delay_hr = dep_hr - sched_dep_hr,
arr_delay_hr= arr_hr - sched_arr_hr)
head(f2b, 10)
f2c=mutate(f2b,
gain_hr= arr_delay_hr - dep_delay_hr,
percent_gain_hr=percent_rank(gain_hr))
head(f2c, 10)
f2d<-filter(f2c, percent_gain_hr < 0.1 | percent_gain_hr > 0.9)
head(f2d, 10)
f2e<-arrange(f2d, desc(percent_gain_hr))
f2e
f2e.pipedream = flights %>%
transmute(dep_hr=dep_time%/%100+(dep_time%%100)/60,
sched_dep_hr=sched_dep_time%/%100+(sched_dep_time%%100)/60,
arr_hr=arr_time%/%100+(arr_time%%100)/60,
sched_arr_hr=sched_arr_time%/%100+(sched_arr_time%%100)/60) %>%
mutate(dep_delay_hr = dep_hr - sched_dep_hr,
arr_delay_hr= arr_hr - sched_arr_hr) %>%
mutate(gain_hr= arr_delay_hr - dep_delay_hr,
percent_gain_hr=percent_rank(gain_hr)) %>%
filter(percent_gain_hr < 0.1 | percent_gain_hr > 0.9) %>%
arrange(desc(percent_gain_hr))
f2e.pipedream
identical(f2e,f2e.pipedream)
f.accuracy<- flights %>%
mutate (dep_hr=dep_time%/%100+(dep_time%%100)/60,
sched_dep_hr=sched_dep_time%/%100+(sched_dep_time%%100)/60,
arr_hr=arr_time%/%100+(arr_time%%100)/60,
sched_arr_hr=sched_arr_time%/%100+(sched_arr_time%%100)/60,
dep_delay_hr=dep_hr-sched_dep_hr,
arr_delay_hr=arr_hr-sched_arr_hr,
accuracy= sqrt(dep_delay_hr^2 + arr_delay_hr^2)) %>%
select(accuracy, everything())
head(f.accuracy,5)
f.accuracy2=select(f.accuracy,carrier,accuracy)
carrier.summary<- f.accuracy2 %>%
group_by(carrier) %>%
summarize(
mean.accuracy=mean(accuracy,na.rm=T),
sd.accuracy=sd(accuracy,na.rm=T)
) %>%
arrange(mean.accuracy)
carrier.summary
ggplot(data=flight.summary) +
geom_point(mapping = aes(x = mean.dist, y = mean.acc,
color = origin))+
geom_smooth(mapping = aes(x = mean.dist, y = mean.acc,
color = origin),
se = FALSE,
method='lm')
# This is a good place to put libraries required for using the ggplot function
knitr::opts_chunk$set(echo = TRUE)
options(scipen=999)
library(tidyverse) #Loads the dplyr package for data manipulation
library(nycflights13) #Loads the nycflights13 package for flights data
library(knitr)        #kable() for HTML Tables
library(kableExtra)   #HTML Table Styling
f1a<-filter(flights, flight == 807)
f1a
f1b<-select(f1a, flight, carrier, origin, dest)
f1b
f1c=rename(f1b,destination = dest)
f1c
f1d<- f1c %>%
select(carrier, origin, destination) %>%
arrange(carrier, origin, destination)
head(f1d, 5)
f1e<-arrange(f1d, desc(carrier), desc(origin), desc(destination))
head(f1e,18)
f2a=transmute(flights,
dep_hr=dep_time%/%100+(dep_time%%100)/60,
sched_dep_hr=sched_dep_time%/%100+(sched_dep_time%%100)/60,
arr_hr=arr_time%/%100+(arr_time%%100)/60,
sched_arr_hr=sched_arr_time%/%100+(sched_arr_time%%100)/60)
names(f2a)
head(f2a,5)
f2b=mutate(f2a,
dep_delay_hr = dep_hr - sched_dep_hr,
arr_delay_hr= arr_hr - sched_arr_hr)
head(f2b, 10)
f2c=mutate(f2b,
gain_hr= arr_delay_hr - dep_delay_hr,
percent_gain_hr=percent_rank(gain_hr))
head(f2c, 10)
f2d<-filter(f2c, percent_gain_hr < 0.1 | percent_gain_hr > 0.9)
head(f2d, 10)
f2e<-arrange(f2d, desc(percent_gain_hr))
f2e
f2e.pipedream = flights %>%
transmute(dep_hr=dep_time%/%100+(dep_time%%100)/60,
sched_dep_hr=sched_dep_time%/%100+(sched_dep_time%%100)/60,
arr_hr=arr_time%/%100+(arr_time%%100)/60,
sched_arr_hr=sched_arr_time%/%100+(sched_arr_time%%100)/60) %>%
mutate(dep_delay_hr = dep_hr - sched_dep_hr,
arr_delay_hr= arr_hr - sched_arr_hr) %>%
mutate(gain_hr= arr_delay_hr - dep_delay_hr,
percent_gain_hr=percent_rank(gain_hr)) %>%
filter(percent_gain_hr < 0.1 | percent_gain_hr > 0.9) %>%
arrange(desc(percent_gain_hr))
f2e.pipedream
identical(f2e,f2e.pipedream)
f.accuracy<- flights %>%
mutate (dep_hr=dep_time%/%100+(dep_time%%100)/60,
sched_dep_hr=sched_dep_time%/%100+(sched_dep_time%%100)/60,
arr_hr=arr_time%/%100+(arr_time%%100)/60,
sched_arr_hr=sched_arr_time%/%100+(sched_arr_time%%100)/60,
dep_delay_hr=dep_hr-sched_dep_hr,
arr_delay_hr=arr_hr-sched_arr_hr,
accuracy= sqrt(dep_delay_hr^2 + arr_delay_hr^2)) %>%
select(accuracy, everything())
head(f.accuracy,5)
f.accuracy2=select(f.accuracy,carrier,accuracy)
carrier.summary<- f.accuracy2 %>%
group_by(carrier) %>%
summarize(
mean.accuracy=mean(accuracy,na.rm=T),
sd.accuracy=sd(accuracy,na.rm=T)
) %>%
arrange(mean.accuracy)
carrier.summary
flight.summary =
#1
flights %>%
#2
mutate(
dep_min       = (dep_time%/%100)*60+dep_time%%100,
sched_dep_min = (sched_dep_time%/%100)*60+sched_dep_time%%100,
arr_min       = (arr_time%/%100)*60+arr_time%%100,
sched_arr_min = (sched_arr_time%/%100)*60+sched_arr_time%%100,
dep_delay_min = dep_min-sched_dep_min,
arr_delay_min = arr_min-sched_arr_min,
accuracy      = sqrt(dep_delay_min^2 + arr_delay_min^2)
) %>%
#3
filter(!is.na(dep_min),
!is.na(sched_dep_min),
!is.na(arr_min),
!is.na(sched_arr_min),
!is.na(dep_delay_min),
!is.na(arr_delay_min),
!is.na(accuracy)) %>%
#4
group_by(origin, dest, carrier) %>%
#5
summarize(
count=n(),
mean.acc=mean(accuracy,na.rm=T),
var.acc=var(accuracy, na.rm=T),
mean.dist=mean(distance, na.rm=T)
) %>%
#6
filter(!(count <= 10)) %>%
#7
ungroup() %>%
#8
mutate(proportion = count/sum(count))
head(flight.summary) #DO NOT CHANGE THIS LINE OF CODE
ggplot(data=flight.summary) +
geom_point(mapping = aes(x = mean.dist, y = mean.acc,
color = origin))+
geom_smooth(mapping = aes(x = mean.dist, y = mean.acc,
color = origin),
se = FALSE,
method='lm')
ggplot(data=filter(flight.summary, !mean.dist > 3000)) +
geom_point(mapping = aes(x = mean.dist, y = mean.acc,
color = origin))+
geom_smooth(mapping = aes(x = mean.dist, y = mean.acc,
color = origin),
se = FALSE,
method='lm')
flight.summary2 =
flight.summary %>%
mutate(rank=min_rank(mean.acc)) %>%
filter(min_rank(mean.acc)<=5 | min_rank(desc(mean.acc))<=5) %>%
arrange(rank)
kable(flight.summary2, eval = T)
f2e<-arrange(f2d, desc(percent_gain_hr))
# This is a good place to put libraries required for using the ggplot function
knitr::opts_chunk$set(echo = TRUE)
options(scipen=999)
library(tidyverse) #Loads the dplyr package for data manipulation
library(nycflights13) #Loads the nycflights13 package for flights data
library(knitr)        #kable() for HTML Tables
library(kableExtra)   #HTML Table Styling
f1a<-filter(flights, flight == 807)
f1a
f1b<-select(f1a, flight, carrier, origin, dest)
f1b
f1c=rename(f1b,destination = dest)
f1c
f1d<- f1c %>%
select(carrier, origin, destination) %>%
arrange(carrier, origin, destination)
head(f1d, 5)
f1e<-arrange(f1d, desc(carrier), desc(origin), desc(destination))
head(f1e,18)
f2a=transmute(flights,
dep_hr=dep_time%/%100+(dep_time%%100)/60,
sched_dep_hr=sched_dep_time%/%100+(sched_dep_time%%100)/60,
arr_hr=arr_time%/%100+(arr_time%%100)/60,
sched_arr_hr=sched_arr_time%/%100+(sched_arr_time%%100)/60)
names(f2a)
head(f2a,5)
f2b=mutate(f2a,
dep_delay_hr = dep_hr - sched_dep_hr,
arr_delay_hr= arr_hr - sched_arr_hr)
head(f2b, 10)
f2c=mutate(f2b,
gain_hr= arr_delay_hr - dep_delay_hr,
percent_gain_hr=percent_rank(gain_hr))
head(f2c, 10)
f2d<-filter(f2c, percent_gain_hr < 0.1 | percent_gain_hr > 0.9)
head(f2d, 10)
f2e<-arrange(f2d, desc(percent_gain_hr))
f2e
f2e.pipedream = flights %>%
transmute(dep_hr=dep_time%/%100+(dep_time%%100)/60,
sched_dep_hr=sched_dep_time%/%100+(sched_dep_time%%100)/60,
arr_hr=arr_time%/%100+(arr_time%%100)/60,
sched_arr_hr=sched_arr_time%/%100+(sched_arr_time%%100)/60) %>%
mutate(dep_delay_hr = dep_hr - sched_dep_hr,
arr_delay_hr= arr_hr - sched_arr_hr) %>%
mutate(gain_hr= arr_delay_hr - dep_delay_hr,
percent_gain_hr=percent_rank(gain_hr)) %>%
filter(percent_gain_hr < 0.1 | percent_gain_hr > 0.9) %>%
arrange(desc(percent_gain_hr))
f2e.pipedream
identical(f2e,f2e.pipedream)
f.accuracy<- flights %>%
mutate (dep_hr=dep_time%/%100+(dep_time%%100)/60,
sched_dep_hr=sched_dep_time%/%100+(sched_dep_time%%100)/60,
arr_hr=arr_time%/%100+(arr_time%%100)/60,
sched_arr_hr=sched_arr_time%/%100+(sched_arr_time%%100)/60,
dep_delay_hr=dep_hr-sched_dep_hr,
arr_delay_hr=arr_hr-sched_arr_hr,
accuracy= sqrt(dep_delay_hr^2 + arr_delay_hr^2)) %>%
select(accuracy, everything())
head(f.accuracy,5)
f.accuracy2=select(f.accuracy,carrier,accuracy)
carrier.summary<- f.accuracy2 %>%
group_by(carrier) %>%
summarize(
mean.accuracy=mean(accuracy,na.rm=T),
sd.accuracy=sd(accuracy,na.rm=T)
) %>%
arrange(mean.accuracy)
carrier.summary
flight.summary =
#1
flights %>%
#2
mutate(
dep_min       = (dep_time%/%100)*60+dep_time%%100,
sched_dep_min = (sched_dep_time%/%100)*60+sched_dep_time%%100,
arr_min       = (arr_time%/%100)*60+arr_time%%100,
sched_arr_min = (sched_arr_time%/%100)*60+sched_arr_time%%100,
dep_delay_min = dep_min-sched_dep_min,
arr_delay_min = arr_min-sched_arr_min,
accuracy      = sqrt(dep_delay_min^2 + arr_delay_min^2)
) %>%
#3
filter(!is.na(dep_min),
!is.na(sched_dep_min),
!is.na(arr_min),
!is.na(sched_arr_min),
!is.na(dep_delay_min),
!is.na(arr_delay_min),
!is.na(accuracy)) %>%
#4
group_by(origin, dest, carrier) %>%
#5
summarize(
count=n(),
mean.acc=mean(accuracy,na.rm=T),
var.acc=var(accuracy, na.rm=T),
mean.dist=mean(distance, na.rm=T)
) %>%
#6
filter(!(count <= 10)) %>%
#7
ungroup() %>%
#8
mutate(proportion = count/sum(count))
head(flight.summary) #DO NOT CHANGE THIS LINE OF CODE
ggplot(data=flight.summary) +
geom_point(mapping = aes(x = mean.dist, y = mean.acc,
color = origin))+
geom_smooth(mapping = aes(x = mean.dist, y = mean.acc,
color = origin),
se = FALSE,
method='lm')
ggplot(data=filter(flight.summary, !mean.dist > 3000)) +
geom_point(mapping = aes(x = mean.dist, y = mean.acc,
color = origin))+
geom_smooth(mapping = aes(x = mean.dist, y = mean.acc,
color = origin),
se = FALSE,
method='lm')
flight.summary2 =
flight.summary %>%
mutate(rank=min_rank(mean.acc)) %>%
filter(min_rank(mean.acc)<=5 | min_rank(desc(mean.acc))<=5) %>%
arrange(rank)
kable(flight.summary2, eval = T)
knitr:kable(flight.summary2, pipe, eval = TRUE)
kable(flight.summary2, pipe, eval = TRUE)
# This is a good place to put libraries required for using the ggplot function
knitr::opts_chunk$set(echo = TRUE)
options(scipen=999)
library(tidyverse) #Loads the dplyr package for data manipulation
library(nycflights13) #Loads the nycflights13 package for flights data
library(knitr)        #kable() for HTML Tables
library(kableExtra)   #HTML Table Styling
f1a<-filter(flights, flight == 807)
f1a
f1b<-select(f1a, flight, carrier, origin, dest)
f1b
f1c=rename(f1b,destination = dest)
f1c
f1d<- f1c %>%
select(carrier, origin, destination) %>%
arrange(carrier, origin, destination)
head(f1d, 5)
f1e<-arrange(f1d, desc(carrier), desc(origin), desc(destination))
head(f1e,18)
f2a=transmute(flights,
dep_hr=dep_time%/%100+(dep_time%%100)/60,
sched_dep_hr=sched_dep_time%/%100+(sched_dep_time%%100)/60,
arr_hr=arr_time%/%100+(arr_time%%100)/60,
sched_arr_hr=sched_arr_time%/%100+(sched_arr_time%%100)/60)
names(f2a)
head(f2a,5)
f2b=mutate(f2a,
dep_delay_hr = dep_hr - sched_dep_hr,
arr_delay_hr= arr_hr - sched_arr_hr)
head(f2b, 10)
f2c=mutate(f2b,
gain_hr= arr_delay_hr - dep_delay_hr,
percent_gain_hr=percent_rank(gain_hr))
head(f2c, 10)
f2d<-filter(f2c, percent_gain_hr < 0.1 | percent_gain_hr > 0.9)
head(f2d, 10)
f2e<-arrange(f2d, desc(percent_gain_hr))
f2e
f2e.pipedream = flights %>%
transmute(dep_hr=dep_time%/%100+(dep_time%%100)/60,
sched_dep_hr=sched_dep_time%/%100+(sched_dep_time%%100)/60,
arr_hr=arr_time%/%100+(arr_time%%100)/60,
sched_arr_hr=sched_arr_time%/%100+(sched_arr_time%%100)/60) %>%
mutate(dep_delay_hr = dep_hr - sched_dep_hr,
arr_delay_hr= arr_hr - sched_arr_hr) %>%
mutate(gain_hr= arr_delay_hr - dep_delay_hr,
percent_gain_hr=percent_rank(gain_hr)) %>%
filter(percent_gain_hr < 0.1 | percent_gain_hr > 0.9) %>%
arrange(desc(percent_gain_hr))
f2e.pipedream
identical(f2e,f2e.pipedream)
f.accuracy<- flights %>%
mutate (dep_hr=dep_time%/%100+(dep_time%%100)/60,
sched_dep_hr=sched_dep_time%/%100+(sched_dep_time%%100)/60,
arr_hr=arr_time%/%100+(arr_time%%100)/60,
sched_arr_hr=sched_arr_time%/%100+(sched_arr_time%%100)/60,
dep_delay_hr=dep_hr-sched_dep_hr,
arr_delay_hr=arr_hr-sched_arr_hr,
accuracy= sqrt(dep_delay_hr^2 + arr_delay_hr^2)) %>%
select(accuracy, everything())
head(f.accuracy,5)
f.accuracy2=select(f.accuracy,carrier,accuracy)
carrier.summary<- f.accuracy2 %>%
group_by(carrier) %>%
summarize(
mean.accuracy=mean(accuracy,na.rm=T),
sd.accuracy=sd(accuracy,na.rm=T)
) %>%
arrange(mean.accuracy)
carrier.summary
flight.summary =
#1
flights %>%
#2
mutate(
dep_min       = (dep_time%/%100)*60+dep_time%%100,
sched_dep_min = (sched_dep_time%/%100)*60+sched_dep_time%%100,
arr_min       = (arr_time%/%100)*60+arr_time%%100,
sched_arr_min = (sched_arr_time%/%100)*60+sched_arr_time%%100,
dep_delay_min = dep_min-sched_dep_min,
arr_delay_min = arr_min-sched_arr_min,
accuracy      = sqrt(dep_delay_min^2 + arr_delay_min^2)
) %>%
#3
filter(!is.na(dep_min),
!is.na(sched_dep_min),
!is.na(arr_min),
!is.na(sched_arr_min),
!is.na(dep_delay_min),
!is.na(arr_delay_min),
!is.na(accuracy)) %>%
#4
group_by(origin, dest, carrier) %>%
#5
summarize(
count=n(),
mean.acc=mean(accuracy,na.rm=T),
var.acc=var(accuracy, na.rm=T),
mean.dist=mean(distance, na.rm=T)
) %>%
#6
filter(!(count <= 10)) %>%
#7
ungroup() %>%
#8
mutate(proportion = count/sum(count))
head(flight.summary) #DO NOT CHANGE THIS LINE OF CODE
ggplot(data=flight.summary) +
geom_point(mapping = aes(x = mean.dist, y = mean.acc,
color = origin))+
geom_smooth(mapping = aes(x = mean.dist, y = mean.acc,
color = origin),
se = FALSE,
method='lm')
ggplot(data=filter(flight.summary, !mean.dist > 3000)) +
geom_point(mapping = aes(x = mean.dist, y = mean.acc,
color = origin))+
geom_smooth(mapping = aes(x = mean.dist, y = mean.acc,
color = origin),
se = FALSE,
method='lm')
flight.summary2 =
flight.summary %>%
mutate(rank=min_rank(mean.acc)) %>%
filter(min_rank(mean.acc)<=5 | min_rank(desc(mean.acc))<=5) %>%
arrange(rank)
kable(flight.summary2, pipe, eval = TRUE)
knitr:kable(flight.summary2, align = rep("c"), eval = TRUE)
kable(flight.summary2, align = rep("c"), eval = TRUE)
