print(sumRow[1:5])
sum_row_rowSums = as.integer(rowSums(A))
sum_row_rowSums[1:5]
sumRowWhile = c()
c = 0
while (c <= nrow(A)) {
sumRowWhile[c] = sum(A[c, 0])
c = c +1
}
identical(sumRow, SumRowWhile)
sumRowWhile = c()
c = 0
while (c <= nrow(A)) {
sumRowWhile[c] = sum(A[c, 0])
c = c +1
}
identical(sumRow, sumRowWhile)
sumRowWhile
rowWhile
sumRow
sumRowWhile = c()
c = 0
while (c <= nrow(A)) {
sumRowWhile[c] = sum(A[c, 0])
c = c + 1
}
identical(sumRow, sumRowWhile)
sumRowWhile = c()
c = 0
while (c <= nrow(A)) {
sumRowWhile[c] = sum(A[c, ])
c = c + 1
}
identical(sumRow, sumRowWhile)
col_mean = c()
for (i in 1:ncol(mtcars)) {
col_mean = mean(mtcars[ ,i])
}
col_mean
col_mean = c()
for (i in 1:ncol(mtcars)) {
col_mean[i] = mean(mtcars[ ,i])
}
col_mean
mtcars
names(iris) #DO NOT CHANGE
iris
names(iris) #DO NOT CHANGE
columnNames = colnames(iris)
for (i in 1:columnNames) {
uniqueVals = unique(iris[[i]])
numUnique = length(uniqueVals)
cat("The number of unique values for", i, "is", numUnique, "\n")
}
names(iris) #DO NOT CHANGE
columnNames = colnames(iris)
for (i in columnNames) {
uniqueVals = unique(iris[[i]])
numUnique = length(uniqueVals)
cat("The number of unique values for", i, "is", numUnique, "\n")
}
bgg<-read.csv("bgg.csv")
bgg2=bgg[,c(4:13,15:20)]
head(bgg2)
bgg3 <- bgg2 %>%
mutate(duration = 2018 - year + 1,
vote.per.year = num_votes / duration,
own.per.year = owned / duration,
player.range = max_players - min_players,
log_vote = log(num_votes + 1),
log_own = log(owned + 1),
diff_rating = avg_rating - geek_rating)
head(bgg3)
ggplot(bgg3, aes(x = num_votes, y = geek_rating)) +
geom_point()
ggplot(bgg3, aes(x = owned, y = geek_rating)) +
geom_point()
ggplot(bgg3, aes(x = log_vote, y = geek_rating)) +
geom_point()
ggplot(bgg3, aes(x = log_own, y = geek_rating)) +
geom_point()
ggplot(bgg3, aes(x = num_votes, y = geek_rating)) +
geom_point() +
facet_wrap(~variable, scales = "free", ncol = 2)
ggplot(bgg3, aes(x = num_votes, y = geek_rating)) +
geom_point()
ggplot(bgg3, aes(x = owned, y = geek_rating)) +
geom_point()
ggplot(bgg3, aes(x = log_vote, y = geek_rating)) +
geom_point()
ggplot(bgg3, aes(x = log_own, y = geek_rating)) +
geom_point()
ggplot(bgg3, aes(x = num_votes, y = geek_rating)) +
geom_point() +
facet_wrap(~x, scales = "free", ncol = 2)
ggplot(bgg3, aes(x = num_votes, y = geek_rating)) +
geom_point() +
facet_wrap(~geek_rating, scales = "free", ncol = 2)
ggplot(bgg3, aes(x = owned, y = geek_rating)) +
geom_point() +
facet_wrap(~geek_rating, scales = "free", ncol = 2)
ggplot(bgg3, aes(x = log_vote, y = geek_rating)) +
geom_point() +
facet_wrap(~geek_rating, scales = "free", ncol = 2)
ggplot(bgg3, aes(x = log_own, y = geek_rating)) +
geom_point() +
facet_wrap(~geek_rating, scales = "free", ncol = 2)
# This is a good place to put libraries required for using the ggplot function
knitr::opts_chunk$set(echo = TRUE,warning=F)
options(scipen=999)
library(tidyverse)
library(Ecdat)
library(modelr)
library(broom)
bgg<-read.csv("bgg.csv")
bgg2=bgg[,c(4:13,15:20)]
head(bgg2)
bgg3 <- bgg2 %>%
mutate(duration = 2018 - year + 1,
vote.per.year = num_votes / duration,
own.per.year = owned / duration,
player.range = max_players - min_players,
log_vote = log(num_votes + 1),
log_own = log(owned + 1),
diff_rating = avg_rating - geek_rating)
head(bgg3)
ggplot(bgg3, aes(x = num_votes, y = geek_rating)) +
geom_point() +
facet_wrap(~geek_rating, scales = "free", ncol = 2)
ggplot(bgg3, aes(x = owned, y = geek_rating)) +
geom_point() +
facet_wrap(~geek_rating, scales = "free", ncol = 2)
# This is a good place to put libraries required for using the ggplot function
knitr::opts_chunk$set(echo = TRUE,warning=F)
options(scipen=999)
library(tidyverse)
library(Ecdat)
library(modelr)
library(broom)
bgg<-read.csv("bgg.csv")
bgg2=bgg[,c(4:13,15:20)]
head(bgg2)
bgg3 <- bgg2 %>%
mutate(duration = 2018 - year + 1,
vote.per.year = num_votes / duration,
own.per.year = owned / duration,
player.range = max_players - min_players,
log_vote = log(num_votes + 1),
log_own = log(owned + 1),
diff_rating = avg_rating - geek_rating)
head(bgg3)
ggplot(bgg3, aes(x = num_votes, y = geek_rating)) +
geom_point()
ggplot(bgg3, aes(x = owned, y = geek_rating)) +
geom_point()
ggplot(bgg3, aes(x = log_vote, y = geek_rating)) +
geom_point()
ggplot(bgg3, aes(x = log_own, y = geek_rating)) +
geom_point()
set.seed(444)
bgg4= bgg3 %>%
mutate(Set=sample(seq_len(nrow()), size = round(0.8 * nrow()), replace = FALSE))
set.seed(444)
bgg4= bgg3 %>%
mutate(Set=sample(seq_len(nrow(bgg3)), size = round(0.8 * nrow(bgg3)), replace = FALSE))
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
lastVal = function(x) {
return (x[[length(x)]])
}
lastVal = function(x) {
return (x[[length(x)]])
}
lastVal(1:40)
evens = function(x) {
return (x[seq(2, length(x), 2)])
}
evens = function(x) {
return (x[seq(2, length(x), 2)])
}
evens(1:40)
removeLast = function(x) {
return (x[!is.nan(x) & (x %% 2 ==0)])
}
removeLast = function(x) {
return (x[1:length(x) - 1])
}
removeLast = function(x) {
return (x[1:length(x) - 1])
}
removeLast(1:10)
evens = function(x) {
return (x[!is.nan(x) & (x %% 2 ==0)])
}
evens(1:20)
evens = function(x) {
return (x[!is.nan(x) & (x %% 2 ==0)])
}
evens(1:40)
meanColumns = c(ncol(mtcars))
names(meanColumns) = names(mtcars)
meanColumns = vector(ncol(mtcars))
meanColumns = vector("double", ncol(mtcars))
names(meanColumns) = names(mtcars)
for (i in names(mtcars)) {
meanColumns[[i]] = mean(mtcars[[i]])
}
meanColumns = vector("double", ncol(mtcars))
names(meanColumns) = names(mtcars)
for (i in names(mtcars)) {
meanColumns[[i]] = mean(mtcars[[i]])
}
meanColumns
columnNames = vector("list", ncol(nycflights13::flights))
names(columnNames) = names(nycflights13::flights)
for (i in names(nycfights13::flights)){
columnNames[[i]] = class(nycflights13::flights[[i]])
}
columnNames = vector("list", ncol(nycflights13::flights))
names(columnNames) = names(nycflights13::flights)
for (i in names(nycfights13::flights)){
columnNames[[i]] = class(nycflights13::flights[[i]])
}
library(tidyverse)
library(purrr)
columnNames = vector("list", ncol(nycflights13::flights))
names(columnNames) = names(nycflights13::flights)
for (i in names(nycfights13::flights)){
columnNames[[i]] = class(nycflights13::flights[[i]])
}
library(tidyverse)
library(purrr)
install.packages("nycflights13")
install.packages("nycflights13")
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(purrr)
install.packages("nycflights13")
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(purrr)
install.packages("nycflights13")
lastVal = function(x) {
return (x[[length(x)]])
}
lastVal(1:40)
evenElements = function(x) {
return (x[seq(2, length(x), 2)])
}
evenElements(1:40)
removeLast = function(x) {
return (x[1:length(x) - 1])
}
removeLast(1:10)
evens = function(x) {
return (x[!is.nan(x) & (x %% 2 ==0)])
}
evens(1:40)
meanColumns = vector("double", ncol(mtcars))
names(meanColumns) = names(mtcars)
for (i in names(mtcars)) {
meanColumns[[i]] = mean(mtcars[[i]])
}
meanColumns
columnNames = vector("list", ncol(nycflights13::flights))
names(columnNames) = names(nycflights13::flights)
for (i in names(nycfights13::flights)){
columnNames[[i]] = class(nycflights13::flights[[i]])
}
library(tidyverse)
library(purrr)
library(nycflights13)
columnNames = vector("list", ncol(nycflights13::flights))
names(columnNames) = names(nycflights13::flights)
for (i in names(nycfights13::flights)){
columnNames[[i]] = class(nycflights13::flights[[i]])
}
columnNames = vector("list", ncol(flights))
names(columnNames) = names(flights)
for (i in names(flights)){
columnNames[[i]] = class(flights[[i]])
}
columnTypes = vector("list", ncol(flights))
names(columnTypes) = names(flights)
for (i in names(flights)){
columnTypes[[i]] = class(flights[[i]])
}
columnTypes
uniqueVals = vector("double", ncol(iris))
names(uniqueVals) = names(iris)
for (i in names(iris)) {
uniqueVals[[i]] = length(uniqueVals[[i]])
}
uniqueVals
uniqueVals = vector("double", ncol(iris))
names(uniqueVals) = names(iris)
for (i in names(iris)) {
uniqueVals[[i]] = length(uniqueVals(iris[[i]]))
}
uniqueVals = vector("double", ncol(iris))
names(uniqueVals) = names(iris)
for (i in names(iris)) {
uniqueVals[[i]] = length(unique(iris[[i]]))
}
uniqueVals
n = 10
nmean = c(-10, 0, 10, 100)
rnormals = vector("list", length(nmeans))
n = 10
nmean = c(-10, 0, 10, 100)
rnormals = vector("list", length(nmean))
for (i in seq_along(rnormals)) {
rnormals[[i]] = rnorm(n, mean = nmean[i])
}
rnormals
map_dbl(mtcars, mean)
#
map_chr(flights, typeof)
map_int(iris, length(unique(iris)))
map_int(iris, function(x) length(unique(x)))
map(c(-10, 0, 10, 100), ~rnorm(n = 10, mean = .))
sim1a <- tibble(
x = rep(1:10, each = 3),
y = x * 1.5 + 6 + rt(length(x), df = 2)
)
sim1a <- tibble(
x = rep(1:10, each = 3),
y = x * 1.5 + 6 + rt(length(x), df = 2)
)
ggplot((sim1a, aes(x = x, y = y))) +
sim1a <- tibble(
x = rep(1:10, each = 3),
y = x * 1.5 + 6 + rt(length(x), df = 2)
)
ggplot(sim1a, aes(x = x, y = y)) +
geom_point() +
geom_smooth(method = "lm", se = FALSE)
sim1a <- tibble(
x = rep(1:10, each = 3),
y = x * 1.5 + 6 + rt(length(x), df = 2)
)
ggplot(sim1a, aes(x = x, y = y)) +
geom_point() +
geom_smooth(method = "lm", se = FALSE)
sim1a <- tibble(
x = rep(1:10, each = 3),
y = x * 1.5 + 6 + rt(length(x), df = 2)
)
ggplot(sim1a, aes(x = x, y = y)) +
geom_point() +
geom_smooth(method = "lm", se = FALSE)
sim1a <- tibble(
x = rep(1:10, each = 3),
y = x * 1.5 + 6 + rt(length(x), df = 2)
)
ggplot(sim1a, aes(x = x, y = y)) +
geom_point() +
geom_smooth(method = "lm", se = FALSE)
sim1a <- tibble(
x = rep(1:10, each = 3),
y = x * 1.5 + 6 + rt(length(x), df = 2)
)
ggplot(sim1a, aes(x = x, y = y)) +
geom_point() +
geom_smooth(method = "lm", se = FALSE)
sim1a <- tibble(
x = rep(1:10, each = 3),
y = x * 1.5 + 6 + rt(length(x), df = 2)
)
ggplot(sim1a, aes(x = x, y = y)) +
geom_point() +
geom_smooth(method = "lm", se = FALSE)
sim1a <- tibble(
x = rep(1:10, each = 3),
y = x * 1.5 + 6 + rt(length(x), df = 2)
)
ggplot(sim1a, aes(x = x, y = y)) +
geom_point() +
geom_smooth(method = "lm", se = FALSE)
sim1a <- tibble(
x = rep(1:10, each = 3),
y = x * 1.5 + 6 + rt(length(x), df = 2)
)
ggplot(sim1a, aes(x = x, y = y)) +
geom_point() +
geom_smooth(method = "lm", se = FALSE)
sim1a <- tibble(
x = rep(1:10, each = 3),
y = x * 1.5 + 6 + rt(length(x), df = 2)
)
ggplot(sim1a, aes(x = x, y = y)) +
geom_point() +
geom_smooth(method = "lm", se = FALSE)
measure_distance <- function(mod, data) {
diff <- data$y - make_prediction(mod, data)
mean(abs(diff))
}
better = optim(c(0,0), measure_distance_ls, data = sim1a)
measure_distance <- function(mod, data) {
diff <- data$y - make_prediction(mod, data)
mean(abs(diff))
}
better = optim(c(0,0), measure_distance, data = sim1a)
measure_distance <- function(mod, data) {
diff <- data$y - make_prediction(mod, data)
mean(abs(diff))
}
better = optim(c(0,0), measure_distance, data = sim1a)
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(purrr)
library(nycflights13)
lastVal = function(x) {
return (x[[length(x)]])
}
lastVal(1:40)
evenElements = function(x) {
return (x[seq(2, length(x), 2)])
}
evenElements(1:40)
removeLast = function(x) {
return (x[1:length(x) - 1])
}
removeLast(1:10)
evens = function(x) {
return (x[!is.nan(x) & (x %% 2 ==0)])
}
evens(1:40)
meanColumns = vector("double", ncol(mtcars))
names(meanColumns) = names(mtcars)
for (i in names(mtcars)) {
meanColumns[[i]] = mean(mtcars[[i]])
}
meanColumns
columnTypes = vector("list", ncol(flights))
names(columnTypes) = names(flights)
for (i in names(flights)){
columnTypes[[i]] = class(flights[[i]])
}
columnTypes
uniqueVals = vector("double", ncol(iris))
names(uniqueVals) = names(iris)
for (i in names(iris)) {
uniqueVals[[i]] = length(unique(iris[[i]]))
}
uniqueVals
n = 10
nmean = c(-10, 0, 10, 100)
rnormals = vector("list", length(nmean))
for (i in seq_along(rnormals)) {
rnormals[[i]] = rnorm(n, mean = nmean[i])
}
rnormals
map_dbl(mtcars, mean)
#
map_chr(flights, typeof)
map_int(iris, function(x) length(unique(x)))
map(c(-10, 0, 10, 100), ~rnorm(n = 10, mean = .))
sim1a <- tibble(
x = rep(1:10, each = 3),
y = x * 1.5 + 6 + rt(length(x), df = 2)
)
ggplot(sim1a, aes(x = x, y = y)) +
geom_point() +
geom_smooth(method = "lm", se = FALSE)
measure_distance <- function(mod, data) {
diff <- data$y - make_prediction(mod, data)
mean(abs(diff))
}
better = optim(c(0,0), measure_distance, data = sim1a)
measure_distance <- function(mod, data) {
diff <- data$y - make_predictions(mod, data)
mean(abs(diff))
}
better = optim(c(0,0), measure_distance, data = sim1a)
measure_distance <- function(mod, data) {
diff <- data$y - (mod[1] + mod[2] * data$x)
sqrt(mean(diff^2))
}
better = optim(c(0,0), measure_distance, data = sim1a)
ggplot(better, aes(x = x, y = y)) +
geom_point() +
geom_smooth(method = "lm", se = FALSE)
measure_distance <- function(mod, data) {
diff <- data$y - (mod[1] + mod[2] * data$x)
sqrt(mean(diff^2))
}
better = optim(c(0,0), measure_distance, data = sim1a)
measure_distance <- function(mod, data) {
diff <- data$y - (mod[1] + mod[2] * data$x)
sqrt(mean(diff^2))
}
better = optim(c(0,0), measure_distance, data = sim1a)
ggplot(sim1a, aes(x = x, y = y)) +
geom_point() +
geom_abline(intercept = better$par[1], slope = better$par[2])
measure_distance <- function(mod, data) {
diff <- data$y - (mod[1] + mod[2] * data$x)
sqrt(mean(diff^2))
}
better = optim(c(0,0), measure_distance, data = sim1a)
ggplot(sim1a, aes(x = x, y = y)) +
geom_point() +
geom_abline(intercept = better$par[1], slope = better$par[2])
measure_distance <- function(mod, data) {
diff <- data$y - (mod[1] + mod[2] * data$x)
sqrt(mean(diff^2))
}
better = optim(c(0,0), measure_distance, data = sim1a)
ggplot(sim1a, aes(x = x, y = y)) +
geom_point() +
geom_abline(intercept = better$par[1], slope = better$par[2])
